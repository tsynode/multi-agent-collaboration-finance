Natural Language to Query Translation for Financial Data Analysis

1. Understanding Natural Language Queries

Financial data queries typically fall into several categories:
- Transaction retrieval (e.g., "Show transactions for customer X from last month")
- Aggregation queries (e.g., "What's the total spending on groceries for customer Y?")
- Trend analysis (e.g., "How has customer Z's spending changed over the past 6 months?")
- Projection queries (e.g., "What will customer A's account balance be next month?")
- Comparison queries (e.g., "Compare customer B's spending this month to last month")

2. Translating Natural Language to Structured Queries

Step 1: Entity and Intent Recognition
First, identify the key entities and intent in the natural language query:

```python
def parse_query(query):
    # Identify customer ID
    customer_id_match = re.search(r'customer (\w+)', query, re.IGNORECASE)
    customer_id = customer_id_match.group(1) if customer_id_match else None
    
    # Identify time period
    time_period = None
    if re.search(r'last month|previous month', query, re.IGNORECASE):
        time_period = 'last_month'
    elif re.search(r'this month|current month', query, re.IGNORECASE):
        time_period = 'current_month'
    elif re.search(r'next month|coming month', query, re.IGNORECASE):
        time_period = 'next_month'
    
    # Identify intent
    intent = None
    if re.search(r'show|display|list|get', query, re.IGNORECASE):
        intent = 'retrieve'
    elif re.search(r'total|sum|add', query, re.IGNORECASE):
        intent = 'aggregate'
    elif re.search(r'compare|difference|versus', query, re.IGNORECASE):
        intent = 'compare'
    elif re.search(r'trend|change|pattern', query, re.IGNORECASE):
        intent = 'trend'
    elif re.search(r'will be|predict|forecast|project', query, re.IGNORECASE):
        intent = 'project'
    
    return {
        'customer_id': customer_id,
        'time_period': time_period,
        'intent': intent
    }
```

Step 2: Query Construction
Based on the identified entities and intent, construct the appropriate structured query:

```python
def construct_query(parsed_query):
    customer_id = parsed_query['customer_id']
    time_period = parsed_query['time_period']
    intent = parsed_query['intent']
    
    if intent == 'retrieve':
        if time_period == 'last_month':
            # Get last month's date range
            today = datetime.now()
            first_day_last_month = datetime(today.year, today.month-1 if today.month > 1 else 12, 1)
            last_day_last_month = datetime(today.year, today.month, 1) - timedelta(days=1)
            
            # Construct query to retrieve transactions
            query = f"""
            SELECT * FROM transactions 
            WHERE customer_id = '{customer_id}' 
            AND transaction_date BETWEEN '{first_day_last_month.strftime('%Y-%m-%d')}' AND '{last_day_last_month.strftime('%Y-%m-%d')}'
            ORDER BY transaction_date DESC
            """
        # Handle other time periods similarly
    
    elif intent == 'aggregate':
        # Construct aggregation query
        query = f"""
        SELECT SUM(amount) as total_amount 
        FROM transactions 
        WHERE customer_id = '{customer_id}'
        """
        if time_period:
            # Add time period filter
            pass
    
    # Handle other intents similarly
    
    return query
```

3. Analyzing Transaction Patterns

To analyze transaction patterns, you can use various statistical methods:

```python
def analyze_transaction_patterns(customer_id):
    # Retrieve all transactions for the customer
    transactions = get_historical_transactions(customer_id)
    
    # Convert to pandas DataFrame for analysis
    import pandas as pd
    df = pd.DataFrame(transactions)
    df['transaction_date'] = pd.to_datetime(df['day'])
    df['amount'] = pd.to_numeric(df['transactionAmount'])
    
    # Monthly spending analysis
    monthly_spending = df.groupby(df['transaction_date'].dt.strftime('%Y-%m')).agg({
        'amount': ['sum', 'mean', 'count']
    })
    
    # Transaction type analysis
    type_analysis = df.groupby('transactionType').agg({
        'amount': ['sum', 'mean', 'count']
    })
    
    # Identify anomalies (transactions that deviate significantly from the mean)
    mean_amount = df['amount'].mean()
    std_amount = df['amount'].std()
    anomalies = df[abs(df['amount'] - mean_amount) > 2 * std_amount]
    
    return {
        'monthly_spending': monthly_spending.to_dict(),
        'type_analysis': type_analysis.to_dict(),
        'anomalies': anomalies.to_dict('records')
    }
```

4. Generating Insights from Financial Data

Once you have the transaction data and analysis, you can generate meaningful insights:

```python
def generate_insights(analysis_results):
    insights = []
    
    # Monthly spending trends
    monthly_data = analysis_results['monthly_spending']
    months = list(monthly_data['amount']['sum'].keys())
    if len(months) >= 2:
        current_month = months[-1]
        previous_month = months[-2]
        current_spending = monthly_data['amount']['sum'][current_month]
        previous_spending = monthly_data['amount']['sum'][previous_month]
        
        percent_change = ((current_spending - previous_spending) / previous_spending) * 100
        if percent_change > 10:
            insights.append(f"Customer's spending increased by {percent_change:.1f}% compared to the previous month.")
        elif percent_change < -10:
            insights.append(f"Customer's spending decreased by {abs(percent_change):.1f}% compared to the previous month.")
    
    return insights
```

5. Transaction Projections Algorithm

The transaction projections algorithm uses a combination of time series analysis and machine learning to predict future transactions. Here's how it works:

```python
def generate_transaction_projections(customer_id):
    # Get historical transaction data
    historical_data = get_historical_transactions(customer_id)
    
    # Prepare data for time series analysis
    df = pd.DataFrame(historical_data)
    df['transaction_date'] = pd.to_datetime(df['day'])
    df['amount'] = pd.to_numeric(df['transactionAmount'])
    
    # Group by month to get monthly patterns
    monthly_data = df.groupby(df['transaction_date'].dt.strftime('%Y-%m')).agg({
        'amount': 'sum',
        'transactionType': lambda x: x.value_counts().index[0]  # Most common transaction type
    })
    
    # Apply time series forecasting (ARIMA model)
    from statsmodels.tsa.arima.model import ARIMA
    
    # Fit ARIMA model to the data
    model = ARIMA(monthly_data['amount'], order=(1, 1, 1))
    model_fit = model.fit()
    
    # Forecast next 3 months
    forecast = model_fit.forecast(steps=3)
    
    # Prepare projected transactions
    projections = []
    current_date = datetime.now()
    
    for i, projected_amount in enumerate(forecast):
        future_date = current_date + relativedelta(months=i+1)
        projection = {
            'customer_id': customer_id,
            'day': future_date.strftime('%Y/%m/01'),
            'transactionAmount': str(round(projected_amount, 2)),
            'type': 'projected',
            'transactionType': monthly_data['transactionType'].iloc[-1]  # Use the most recent transaction type
        }
        projections.append(projection)
    
    return projections
```

6. Updating Transaction Projections

Users can manually update transaction projections when they have additional information about future financial activities:

```python
def update_projections(customer_id, month, year, amount, transaction_type='deposit'):
    # Create a datetime object for the specified month/year
    projection_date = datetime(int(year), int(month), 1)
    
    # Only allow updates for future dates
    current_date = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    if projection_date >= current_date:
        # Create the projection item
        projection_item = {
            'customer_id': customer_id,
            'day': projection_date.strftime('%Y/%m/%d'),
            'transactionAmount': amount,
            'type': 'projected',
            'transactionType': transaction_type
        }
        
        # Store in database
        store_projection(projection_item)
        
        return f"Successfully updated projection for {projection_date.strftime('%B %Y')} for customer {customer_id}"
    else:
        return f"Cannot update projections for past dates. Please specify a future month and year."
```

This function allows bank operators to manually override the algorithmically generated projections with more accurate information when available, such as when a customer informs the bank about planned large expenses or income changes.
